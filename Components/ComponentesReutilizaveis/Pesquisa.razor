@inject NavigationManager _navigation

<MudTextField Value="@termoBusca" ValueChanged="@OnSearchChanged" Label="@Label" 
              Variant="Variant.Outlined" Adornment="Adornment.Start" 
              AdornmentIcon="Icons.Material.Filled.Search" 
              AdornmentColor="Color.Info" AutoFocus="true" Immediate="true" />

@if (Resultados.Any())
{
    <ul class="resultados">
        <h4 style="mb-2">üëá <strong>Esses s√£o os resultados encontrados</strong> üëá</h4>
        @foreach (var pagina in Resultados)
        {
            <li>
                <a href="@pagina.Link">@pagina.Titulo</a>
                <p>@pagina.Conteudo</p>
            </li>
        }
    </ul>
}
else if (!string.IsNullOrWhiteSpace(termoBusca))
{
    <p>Nenhum resultado encontrado.</p>
}

@code {
    [Parameter] public List<Pagina> Dados { get; set; } = new();
    [Parameter] public string Label { get; set; } = "üîç Pesquisar...";

    private string termoBusca = "";

    protected override void OnInitialized()
    {
        var uri = new Uri(_navigation.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
        termoBusca = queryParams["q"] ?? "";
    }

    private List<Pagina> Resultados => string.IsNullOrWhiteSpace(termoBusca)
        ? new List<Pagina>()
        : Dados.Where(p => 
            p.Titulo.Contains(termoBusca, StringComparison.OrdinalIgnoreCase) || 
            p.Conteudo.Contains(termoBusca, StringComparison.OrdinalIgnoreCase))
        .ToList();

    private EventCallback<string> OnSearchChanged => EventCallback.Factory.Create<string>(this, (novoTermo) =>
    {
        if (termoBusca != novoTermo)
        {
            termoBusca = novoTermo;
            AtualizarUrlComTermo(termoBusca);
        }
    });

    private void AtualizarUrlComTermo(string termo)
    {
        var uriBase = new Uri(_navigation.Uri).GetLeftPart(UriPartial.Path);

        var novaUrl = string.IsNullOrWhiteSpace(termo) ? uriBase : $"{uriBase}?q={Uri.EscapeDataString(termo)}";

        _navigation.NavigateTo(novaUrl, forceLoad: false);
    }
}
